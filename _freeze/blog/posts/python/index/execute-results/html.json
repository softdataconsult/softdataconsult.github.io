{
  "hash": "260d3160878c4ad28a1f9fb5b2fd516e",
  "result": {
    "markdown": "---\ntitle: \"One-way ANOVA using Python\"\ndescription: |\n  Learn how to carry out one-way analysis of variance using Python.\ndate: \"10-07-2024\"\n#author: \"Isaac Ajao\"\n#date: \"2024-10-06\"\ncategories: [Python, R, Analytics]\nimage: \"python_logo.png\"\n---\n\nIn this blog, we'll explore how to perform a One-Way ANOVA in Python to compare the means of multiple groups and assess if they are statistically different.\n\n\n### Introduction to One-Way ANOVA in Python\n\nWhen analyzing data, one of the key tasks is to determine whether the means of different groups are significantly different from one another. One powerful statistical test to help with this is the **Analysis of Variance (ANOVA)**, specifically the **One-Way ANOVA**. This technique is used when you have one independent categorical variable and want to compare the means of two or more groups on a continuous dependent variable.\n\n**One-Way ANOVA** tests the null hypothesis that the means of several groups are equal, versus the alternative hypothesis that at least one group mean is different. It's particularly useful when dealing with experiments or observational studies that involve comparisons across multiple groups or categories.\n\nIn Python, we can easily perform One-Way ANOVA using libraries like **SciPy** and **Statsmodels**, which offer user-friendly methods for statistical analysis. In this tutorial, we will walk through the steps of carrying out a One-Way ANOVA in Python, from setting up the data to interpreting the results.\n\n### When to Use One-Way ANOVA:\n\n- You have **one categorical independent variable** with two or more groups (e.g., treatment types or different locations).\n\n- The dependent variable is **continuous** (e.g., height, weight, test scores).\n\n- The data should meet assumptions such as normality within each group and homogeneity of variances.\n\nIn the following sections, we will use Python to:\n\n1. Set up and explore the data.\n\n2. Perform One-Way ANOVA using `scipy.stats` and `statsmodels`.\n\n3. Interpret the ANOVA results and check assumptions.\n\n\n# Load the necessary libraries\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Load the necessary libraries\nimport pandas as pd\nfrom scipy import stats\nimport statsmodels.api as sm # for statistical analysis\nfrom statsmodels.formula.api import ols # for statistical analysis\nimport seaborn as sns # to plot charts \nimport matplotlib.pyplot as plt # to plot charts\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Data setup\ndata = {\n    'Group': ['Group 1', 'Group 2', 'Group 3', 'Group 4'] * 3,\n    'Layout': ['A'] * 4 + ['B'] * 4 + ['C'] * 4,\n    'Time_Spent': [12, 14, 11, 13, 15, 18, 14, 17, 10, 13, 12, 11]\n}\n\ndf = pd.DataFrame(data)\nprint(\"\\nData on time spent\\n\", df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nData on time spent\n       Group Layout  Time_Spent\n0   Group 1      A          12\n1   Group 2      A          14\n2   Group 3      A          11\n3   Group 4      A          13\n4   Group 1      B          15\n5   Group 2      B          18\n6   Group 3      B          14\n7   Group 4      B          17\n8   Group 1      C          10\n9   Group 2      C          13\n10  Group 3      C          12\n11  Group 4      C          11\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Performing one-way ANOVA\nmodel = ols('Time_Spent ~ C(Layout)', data = df).fit()\nanova_table = sm.stats.anova_lm(model,typ=2)\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Printing the ANOVA table\nprint(anova_table)   # reject Ho (null hypothesis) if p-value is less than 0.05 which says there's no diff in means in the groups\n\nprint(model.summary())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              sum_sq   df      F    PR(>F)\nC(Layout)  44.666667  2.0  10.05  0.005088\nResidual   20.000000  9.0    NaN       NaN\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:             Time_Spent   R-squared:                       0.691\nModel:                            OLS   Adj. R-squared:                  0.622\nMethod:                 Least Squares   F-statistic:                     10.05\nDate:                Mon, 07 Oct 2024   Prob (F-statistic):            0.00509\nTime:                        12:49:41   Log-Likelihood:                -20.092\nNo. Observations:                  12   AIC:                             46.18\nDf Residuals:                       9   BIC:                             47.64\nDf Model:                           2                                         \nCovariance Type:            nonrobust                                         \n==================================================================================\n                     coef    std err          t      P>|t|      [0.025      0.975]\n----------------------------------------------------------------------------------\nIntercept         12.5000      0.745     16.771      0.000      10.814      14.186\nC(Layout)[T.B]     3.5000      1.054      3.320      0.009       1.115       5.885\nC(Layout)[T.C]    -1.0000      1.054     -0.949      0.368      -3.385       1.385\n==============================================================================\nOmnibus:                        2.312   Durbin-Watson:                   3.525\nProb(Omnibus):                  0.315   Jarque-Bera (JB):                0.932\nSkew:                          -0.000   Prob(JB):                        0.628\nKurtosis:                       1.635   Cond. No.                         3.73\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\scipy\\stats\\_axis_nan_policy.py:418: UserWarning: `kurtosistest` p-value may be inaccurate with fewer than 20 observations; only n=12 observations were given.\n  return hypotest_fun_in(*args, **kwds)\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Post-hoc test (Tukey's HSD)\nfrom statsmodels.stats.multicomp import pairwise_tukeyhsd\n\ntukey = pairwise_tukeyhsd(endog=df['Time_Spent'], groups=df['Layout'], alpha=0.05)\nprint(tukey)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMultiple Comparison of Means - Tukey HSD, FWER=0.05\n==================================================\ngroup1 group2 meandiff p-adj  lower  upper  reject\n--------------------------------------------------\n     A      B      3.5  0.022  0.557  6.443   True\n     A      C     -1.0 0.6251 -3.943  1.943  False\n     B      C     -4.5 0.0053 -7.443 -1.557   True\n--------------------------------------------------\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Visualizing the results\nsns.boxplot(x='Layout', y='Time_Spent', data=df)\nplt.title('User Engagement Time by Website layout')\nplt.xlabel('Website layout')\nplt.ylabel('Time Spent (minute)')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=585 height=449}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}